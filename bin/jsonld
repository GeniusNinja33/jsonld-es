#!/usr/bin/env node
/**
 * A command line JSON-LD utility.
 *
 * @author David I. Lehn <dlehn@digitalbazaar.com>
 *
 * BSD 3-Clause License
 * Copyright (c) 2013 Digital Bazaar, Inc.
 * All rights reserved.
 */

var async = require('async');
var fs = require('fs');
var jsonld = require('../js/jsonld');
var path = require('path');
var pkginfo = require('pkginfo')(module, 'version');
var program = require('commander');

// use 'request' extension to load JSON-LD
jsonld.use('request');

// Parse the string or value and return the boolean value encoded or raise an
// exception.
function boolify(value) {
  if(typeof value === 'boolean') {
    return value;
  }
  if(typeof value === 'string' && value) {
    var lower = value.toLowerCase();
    switch(value.toLowerCase()) {
      case 'true':
      case 't':
      case '1':
      case 'yes':
      case 'y':
        return true;
      case 'false':
      case 't':
      case '0':
      case 'no':
      case 'n':
        return false;
    }
  }
  // if here we couldn't parse it
  throw Error('Invalid boolean:' + value);
}

// common output function
function _output(data, cmd, callback) {
  if(typeof data === 'object') {
    var output = JSON.stringify(data, null, cmd.indent);
    process.stdout.write(output);
  }
  else if(typeof data === 'string') {
    process.stdout.write(data.trim());
  }
  else {
    process.stdout.write(data);
  }
  if(cmd.newline) {
    process.stdout.write('\n');
  }
  callback();
}

// final async call to handle errors
function _final(err, results) {
  if(err) {
    if(err instanceof Error) {
      console.log(err.toString());
    }
    else if(typeof err === 'object') {
      console.log('Error:', JSON.stringify(err, null, 2));
    }
    else {
      console.log('Error:', err);
    }
    process.exit(1);
  }
}

// check for HTTP/HTTPS URL
function _isHTTP(url) {
  return (url.indexOf('http://') === 0 || url.indexOf('https://') === 0);
}

// init common command options
function _jsonLdCommand(command) {
  command
    .option('-i, --indent <spaces>', 'spaces to indent [2]', Number, 2)
    .option('-N, --no-newline', 'do not output the trailing newline [newline]')
    .option('-k, --insecure', 'allow insecure SSL connections [false]')
    .option('-t, --type <type>', 'input type [auto]')
  return command;
}

// init options for request
function _requestOptions(command) {
  var options = {};
  if(command.insecure) {
    options.strictSSL = false;
  }
  if(command.type && command.type !== 'auto') {
    options.type = command.type;
  }
  return options;
}

program
  .version(module.exports.version);

_jsonLdCommand(program.command('format [filename|URL|-]'))
  .description('format JSON')
  .option('-b, --base <base>', 'base IRI []', String)
  .option('-f, --format <format>', 'output format [json]', String)
  .option('-q, --nquads', 'output application/nquads [false]')
  .option('-j, --json', 'output application/json [true]')
  .action(function(input, cmd) {
    input = input || '-';
    var reqopts = _requestOptions(cmd);
    async.auto({
      readInput: function(callback, results) {
        jsonld.request(input, reqopts, callback);
      },
      process: ['readInput', function(callback, results) {
        var options = {
          format: cmd.format
        };
        if(cmd.base) {
          options.base = cmd.base;
        }
        if(!options.format) {
          options.format = 'json';
        }
        if(cmd.nquads) {
          options.format = 'application/nquads';
        }
        if(cmd.json) {
          options.format = 'application/json';
        }
        switch(options.format) {
          case 'application/nquads':
            jsonld.toRDF(results.readInput, options,
              function(err, dataset) {
                callback(err, dataset);
              });
            break;
          case 'application/json':
          case 'json':
          case 'application/ld+json':
          case 'json-ld':
          case 'ld+json':
            callback(null, results.readInput);
            break;
          default:
            throw Error('ERROR: Unknown format: ' + options.format);
        }
      }],
      output: ['process', function(callback, results) {
        _output(results.process, cmd, callback);
      }]
    }, _final);
  });

_jsonLdCommand(program.command('compact [filename|URL]'))
  .description('compact JSON-LD')
  .option('-b, --base <base>', 'base IRI', String)
  .option('-c, --context <filename|URL>', 'context filename or URL')
  .option('-S, --no-strict', 'disable strict mode')
  .option('-A, --no-compact-arrays',
    'disable compacting arrays to single values')
  .option('-g, --graph', 'always output top-level graph [false]')
  .action(function(input, cmd) {
    input = input || '-';
    var reqopts = _requestOptions(cmd);
    async.auto({
      readContext: function(callback, results) {
        // use built-in context loader
        if(_isHTTP(cmd.context)) {
          return callback(null, cmd.context);
        }
        jsonld.request(cmd.context, reqopts, callback)
      },
      readInput: function(callback, results) {
        jsonld.request(input, reqopts, callback);
      },
      process: ['readContext', 'readInput', function(callback, results) {
        var options = {
          strict: cmd.strict,
          compactArrays: cmd.compactArrays,
          graph: !!cmd.graph
        };
        if(cmd.base) {
          options.base = cmd.base;
        }
        jsonld.compact(results.readInput, results.readContext, options,
          function(err, compacted) {
            callback(err, compacted);
          });
      }],
      output: ['process', function(callback, results) {
        _output(results.process, cmd, callback);
      }]
    }, _final);
  });

_jsonLdCommand(program.command('expand [filename|URL|-]'))
  .description('expand JSON-LD')
  .option('-b, --base <base>', 'base IRI', String)
  .option('    --keep-free-floating-nodes', 'keep free-floating nodes')
  .action(function(input, cmd) {
    input = input || '-';
    var reqopts = _requestOptions(cmd);
    async.auto({
      readInput: function(callback, results) {
        jsonld.request(input, reqopts, callback);
      },
      expand: ['readInput', function(callback, results) {
        var options = {
          keepFreeFloatingNodes: cmd.keepFreeFloatingNodes
        };
        if(cmd.base) {
          options.base = cmd.base;
        }
        jsonld.expand(results.readInput, options,
          function(err, expanded) {
            callback(err, expanded);
          });
      }],
      output: ['process', function(callback, results) {
        _output(results.process, cmd, callback);
      }]
    }, _final);
  });

_jsonLdCommand(program.command('flatten [filename|URL|-]'))
  .description('flatten JSON-LD')
  .option('-b, --base <base>', 'base IRI', String)
  .option('-c, --context <filename|URL>',
    'context filename or URL for compaction [none]')
  .action(function(input, cmd) {
    input = input || '-';
    var reqopts = _requestOptions(cmd);
    async.auto({
      readInput: function(callback, results) {
        jsonld.request(input, reqopts, callback);
      },
      readContext: function(callback, results) {
        if(cmd.context) {
          // use built-in context loader
          if(_isHTTP(cmd.context)) {
            return callback(null, cmd.context);
          }
          jsonld.request(cmd.context, reqopts, callback);
        }
        else {
          callback(null, null);
        }
      },
      process: ['readInput', 'readContext', function(callback, results) {
        var options = {};
        if(cmd.base) {
          options.base = cmd.base;
        }
        jsonld.flatten(results.readInput, results.readContext, options,
          function(err, flattened) {
            callback(err, flattened);
          });
      }],
      output: ['process', function(callback, results) {
        _output(results.process, cmd, callback);
      }]
    }, _final);
  });

_jsonLdCommand(program.command('frame [filename|URL|-]'))
  .description('flatten JSON-LD')
  .option('-b, --base <base>', 'base IRI', String)
  .option('-f, --frame <filename|URL>', 'frame to use')
  .option('-e, --embed <embed>', 'default @embed flag [true]', boolify, true)
  .option('-x, --explicit <explicit>', 'default @explicit flag [false]',
    boolify, false)
  .option('-d, --omitDefault <omitDefault>',
    'default @omitDefault flag [false]', boolify, false)
  .action(function(input, cmd) {
    input = input || '-';
    async.auto({
      readInput: function(callback, results) {
        jsonld.request(input, reqopts, callback);
      },
      readFrame: function(callback, results) {
        jsonld.request(cmd.frame, reqopts, callback)
      },
      process: ['readInput', 'readFrame', function(callback, results) {
        var options = {
          embed: cmd.embed,
          explicit: cmd.explicit,
          omitDefault: cmd.omitDefault
        };
        if(cmd.base) {
          options.base = cmd.base;
        }
        jsonld.frame(results.readInput, results.readFrame, options,
          function(err, framed) {
            callback(err, framed);
          });
      }],
      output: ['process', function(callback, results) {
        _output(results.process, cmd, callback);
      }]
    }, _final);
  });

_jsonLdCommand(program.command('normalize [filename|URL|-]'))
  .description('normalize JSON-LD')
  .option('-b, --base <base>', 'base IRI', String)
  .option('-f, --format <format>',
    'format to output (\'application/nquads\' for N-Quads')
  .option('-q, --nquads', 'use \'application/nquads\' format')
  .action(function(input, cmd) {
    input = input || '-';
    var reqopts = _requestOptions(cmd);
    async.auto({
      readInput: function(callback, results) {
        jsonld.request(input, reqopts, callback);
      },
      process: ['readInput', function(callback, results) {
        var options = {};
        if(cmd.base) {
          options.base = cmd.base;
        }
        if(cmd.nquads) {
          options.format = 'application/nquads';
        }
        if(cmd.format) {
          options.format = cmd.format;
        }
        jsonld.normalize(results.readInput, options,
          function(err, normalized) {
            callback(err, normalized);
          });
      }],
      output: ['process', function(callback, results) {
        _output(results.process, cmd, callback);
      }]
    }, _final);
  });

program.parse(process.argv);
